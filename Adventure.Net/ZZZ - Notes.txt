
Overview
--------------
Simplify parser by trying to get rid of Grammars and crazy rules in the parser

"turn on lamp", "turn lamp off" -> should match Switch as verb

Switch figures out whether to turn object on or off based on tokens.

Find verb, pass tokens to Verb for further processing.

Basic Workflow
---------------
"put lamp in box"

// verb is always first token
var token = tokens.RemoveAt(0);
var put =  VerbList.GetVerbByName(token);

// scan remainging tokens for object and indirect object, everything else is a string that will  be interpreted by
// the Verb. This way there are no crazy rules for things like "in" which can be a preposition or a direction

list: obj1 = lamp, "in", obj2 = table // verb figures out whether "in" is valid or not

// pass to verb to handle
Put.Process(list)

// base Verb class handles the execution of Before, During, After workflow
// each verb class can handle it's weird special cases

"put batteries in lamp"
Put verb knows, based on "in" that lamp is really the target object here

"turn on"
> What do you want to turn on?

"switch on"
> What do you want to switch on?

Verb can handle capturing the input and forwarding to the object
* The prompt uses the synonymn supplied by the user

All/Except
--------------
<multi> = multiple objects (list of objects, all and except)

Parser figures out if objects are in/out of scope and displays the appropriate error messages
or
Verb evaluates if it is items in inventory or items in scope (drop vs. take)
or
Parser asks Verb 

"take all" (objects in scope) - parser handles evaluating all to all in scope objects and
builds object list to pass to Take

"drop all" (objects in inventory)

"take all except xyz" - parser just removes the objects from the list
before passing it to Take.

---------
<noun> - can be held, in the room or up to the code to decide
<held> - one item im inventory
<multi> - multiple <noun> (objects)
<multiheld> - multiple objects in inventory